{"version":3,"sources":["components/Flashcard.js","components/FlashcardDeck.js","utils/api.js","App.js","index.js"],"names":["Flashcard","_ref","card","showAnswer","onShowAnswer","_jsxs","className","children","_jsx","question","concat","answer","onClick","FlashcardDeck","deck","_useState","useState","_useState2","_slicedToArray","currentCardIndex","setCurrentCardIndex","_useState3","_useState4","setShowAnswer","useEffect","cards","length","API_URL","getDecks","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","decks","wrap","_context","prev","next","fetch","sent","ok","Error","json","abrupt","t0","console","error","stop","apply","arguments","addFlashcardToDeck","_ref2","_callee2","deckId","updatedDeck","_context2","method","headers","body","JSON","stringify","_x","_x2","App","setDecks","currentDeck","setCurrentDeck","api","then","data","onChange","e","find","d","id","handleDeckChange","target","value","map","name","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d60f0413.chunk.js","sourcesContent":["/** @format */\n\nimport React from \"react\";\n\nfunction Flashcard({ card, showAnswer, onShowAnswer }) {\n\treturn (\n\t\t<div className=\"flashcard p-4 rounded shadow-lg bg-white\">\n\t\t\t<div className=\"question mb-4\">\n\t\t\t\t<h3 className=\"text-lg font-semibold\">Question:</h3>\n\t\t\t\t<p>{card.question}</p>\n\t\t\t</div>\n\t\t\t<div className={`answer mb-4 ${showAnswer ? \"block\" : \"hidden\"}`}>\n\t\t\t\t<h3 className=\"text-lg font-semibold\">Answer:</h3>\n\t\t\t\t<p>{card.answer}</p>\n\t\t\t</div>\n\t\t\t<button\n\t\t\t\tclassName=\"show-answer-btn bg-blue-500 text-white p-2 rounded hover:bg-blue-700 transition-colors\"\n\t\t\t\tonClick={onShowAnswer}\n\t\t\t>\n\t\t\t\t{showAnswer ? \"Hide\" : \"Show\"} Answer\n\t\t\t</button>\n\t\t</div>\n\t);\n}\n\nexport default Flashcard;\n","/** @format */\n\nimport React, { useState, useEffect } from \"react\";\nimport Flashcard from \"./Flashcard\";\n\nfunction FlashcardDeck({ deck }) {\n\tconst [currentCardIndex, setCurrentCardIndex] = useState(0);\n\tconst [showAnswer, setShowAnswer] = useState(false);\n\n\tuseEffect(() => {\n\t\t// Reset to the first card and hide answer when deck changes\n\t\tsetCurrentCardIndex(0);\n\t\tsetShowAnswer(false);\n\t}, [deck]);\n\n\tconst handleNextCard = () => {\n\t\t// Show the next card and hide the answer\n\t\tif (currentCardIndex < deck.cards.length - 1) {\n\t\t\tsetCurrentCardIndex(currentCardIndex + 1);\n\t\t} else {\n\t\t\tsetCurrentCardIndex(0); // Loop back to the first card\n\t\t}\n\t\tsetShowAnswer(false);\n\t};\n\n\tconst handleShowAnswer = () => {\n\t\tsetShowAnswer(!showAnswer);\n\t};\n\n\treturn (\n\t\t<div className=\"flashcard-deck\">\n\t\t\t{deck.cards.length > 0 ? (\n\t\t\t\t<div>\n\t\t\t\t\t<Flashcard\n\t\t\t\t\t\tcard={deck.cards[currentCardIndex]}\n\t\t\t\t\t\tshowAnswer={showAnswer}\n\t\t\t\t\t\tonShowAnswer={handleShowAnswer}\n\t\t\t\t\t/>\n\t\t\t\t\t<div className=\"mt-4 flex justify-between items-center\">\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tclassName=\"bg-blue-500 text-white p-2 rounded hover:bg-blue-700 transition-colors\"\n\t\t\t\t\t\t\tonClick={handleNextCard}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tNext Card\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<span className=\"text-sm text-gray-600\">\n\t\t\t\t\t\t\tCard {currentCardIndex + 1} of {deck.cards.length}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t) : (\n\t\t\t\t<p>No cards in this deck.</p>\n\t\t\t)}\n\t\t</div>\n\t);\n}\n\nexport default FlashcardDeck;\n","/** @format */\n\n// src/utils/api.js\n// This module provides functions to interact with the backend API for managing flashcard decks.\n\nconst API_URL = \"/api\"; // Assuming the server is set up to handle requests under \"/api\"\n\n/**\n * Fetches all decks from the server.\n * @returns {Promise<Array>} A promise that resolves to an array of deck objects.\n */\nconst getDecks = async () => {\n\ttry {\n\t\tconst response = await fetch(`${API_URL}/decks`);\n\t\tif (!response.ok) {\n\t\t\tthrow new Error(\"Network response was not ok\");\n\t\t}\n\t\tconst decks = await response.json();\n\t\treturn decks;\n\t} catch (error) {\n\t\tconsole.error(\"Error fetching decks:\", error);\n\t\tthrow error;\n\t}\n};\n\n/**\n * Adds a new flashcard to a specified deck.\n * @param {string} deckId The ID of the deck to which the flashcard will be added.\n * @param {Object} card The flashcard object containing the question and answer.\n * @returns {Promise<Object>} A promise that resolves to the updated deck object.\n */\nconst addFlashcardToDeck = async (deckId, card) => {\n\ttry {\n\t\tconst response = await fetch(`${API_URL}/decks/${deckId}/cards`, {\n\t\t\tmethod: \"POST\",\n\t\t\theaders: {\n\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t},\n\t\t\tbody: JSON.stringify(card),\n\t\t});\n\t\tif (!response.ok) {\n\t\t\tthrow new Error(\"Network response was not ok\");\n\t\t}\n\t\tconst updatedDeck = await response.json();\n\t\treturn updatedDeck;\n\t} catch (error) {\n\t\tconsole.error(\"Error adding flashcard:\", error);\n\t\tthrow error;\n\t}\n};\n\nexport default {\n\tgetDecks,\n\taddFlashcardToDeck,\n};\n","/** @format */\n\nimport React, { useState, useEffect } from \"react\";\nimport FlashcardDeck from \"./components/FlashcardDeck\";\nimport api from \"./utils/api\";\n\nfunction App() {\n\tconst [decks, setDecks] = useState([]);\n\tconst [currentDeck, setCurrentDeck] = useState(null);\n\n\tuseEffect(() => {\n\t\t// Fetch all decks from the API on component mount\n\t\tapi.getDecks().then(data => {\n\t\t\tsetDecks(data);\n\t\t\t// Automatically select the first deck if available\n\t\t\tif (data.length > 0) {\n\t\t\t\tsetCurrentDeck(data[0]);\n\t\t\t}\n\t\t});\n\t}, []);\n\n\tconst handleDeckChange = deckId => {\n\t\t// Find and set the current deck based on deckId\n\t\tconst deck = decks.find(d => d.id === deckId);\n\t\tsetCurrentDeck(deck);\n\t};\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<header className=\"bg-blue-500 text-white p-4\">\n\t\t\t\t<h1 className=\"text-xl\">Flashcard App</h1>\n\t\t\t</header>\n\t\t\t<main className=\"p-4\">\n\t\t\t\t{decks.length > 0 && (\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<h2 className=\"text-lg mb-2\">Select a Deck:</h2>\n\t\t\t\t\t\t<select\n\t\t\t\t\t\t\tonChange={e => handleDeckChange(e.target.value)}\n\t\t\t\t\t\t\tvalue={currentDeck?.id || \"\"}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{decks.map(deck => (\n\t\t\t\t\t\t\t\t<option key={deck.id} value={deck.id}>\n\t\t\t\t\t\t\t\t\t{deck.name}\n\t\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</select>\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t\t{currentDeck && <FlashcardDeck deck={currentDeck} />}\n\t\t\t</main>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","/** @format */\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n// import reportWebVitals from \"./reportWebVitals\";\n\n// TailwindCSS import for global styles\nimport \"tailwindcss/tailwind.css\";\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\"),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}